<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Word Search</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    .word-list {
      margin-bottom: 20px;
    }
    .word-search-grid td {
      width: 30px;
      height: 30px;
      text-align: center;
      vertical-align: middle;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .found {
      background-color: green;
      color: white;
    }
    .selected {
      background-color: #007bff;
      color: white;
    }
  </style>
</head>
<body>
 <br><br><br>
  <div class="container">
   <div class="row align-items-end">
      <div class="col-sm-9">
        <input type="text" class="form-control" id="word" name="word" placeholder="Type a word" form="wordSearchForm">
      </div>
      <div class="col-sm-3">
        <button type="submit" class="btn btn-primary" form="wordSearchForm">Search</button>
      </div>
    </div>
    <!-- Flash Message for Errors -->
    <% if (error) { %>
    <div class="alert alert-danger mt-2" role="alert">
      <%= error %>
    </div>
    <% } %>
    <div class="row">
      <div class="col-md-6">
        <h2>Word List:</h2>
        <ul class="word-list">
          <% data.forEach(function(dataItem) { %>
          <li class="words" onclick="getDefinition('<%= dataItem.word %>')"><%= dataItem.word %></li>
          <% }) %>
        </ul>
        <div id="wordDefinition" class="mt-3"></div>
      </div>
      <div class="col-md-6">
        <h2>Word Search Grid:</h2>
        <table class="word-search-grid">
          <% grid.forEach(function(row, rowIndex) { %>
          <tr>
            <% row.forEach(function(cell, cellIndex) { %>
            <td onclick="toggleCell(this, '<%= cell %>', <%= rowIndex %>, <%= cellIndex %>)" 
                class="cell" id="cell-<%= rowIndex %>-<%= cellIndex %>"><%= cell %></td>
            <% }) %>
          </tr>
          <% }) %>
        </table>
        <button onclick="submitWord()" class="btn btn-success mt-3">Submit</button>
        <button onclick="clearSelection()" class="btn btn-warning mt-3">Clear</button>
      </div>
    </div>
  </div>
<form id="wordSearchForm" action="/" method="get" class="d-none"></form>
<script>
let selectedLetters = '';
let selectedPositions = [];
let selectionDirection = null;

function isNeighbor(lastPos, currentPos) {
  const [lastRow, lastCol] = lastPos;
  const [currRow, currCol] = currentPos;
  return Math.abs(lastRow - currRow) <= 1 && Math.abs(lastCol - currCol) <= 1;
}

function determineDirection(lastPos, currentPos) {
  if (lastPos[0] === currentPos[0]) return 'horizontal';
  if (lastPos[1] === currentPos[1]) return 'vertical';
  if (Math.abs(lastPos[0] - currentPos[0]) === Math.abs(lastPos[1] - currentPos[1])) {
    return (currentPos[0] - lastPos[0] === currentPos[1] - lastPos[1]) ? 'diagonal-desc' : 'diagonal-asc';
  }
  return null;
}

function updateDirectionIfFirstPair(currentPos) {
  if (selectedPositions.length === 1) {
    const lastPos = selectedPositions[0];
    selectionDirection = determineDirection(lastPos, currentPos);
  }
}

function toggleCell(cell, letter, rowIndex, cellIndex) {
  const currentPosition = [rowIndex, cellIndex];
  if (selectedPositions.length === 0) {
    cell.classList.add('selected');
    selectedLetters += letter;
    selectedPositions.push(currentPosition);
  } else {
    const lastPosition = selectedPositions[selectedPositions.length - 1];
    if (isNeighbor(lastPosition, currentPosition) && (!selectionDirection || determineDirection(lastPosition, currentPosition) === selectionDirection)) {
      updateDirectionIfFirstPair(currentPosition);
      if (!cell.classList.contains('selected')) {
        cell.classList.add('selected');
        selectedLetters += letter;
        selectedPositions.push(currentPosition);
      }
    }
  }
  console.log(selectedLetters, selectedPositions, selectionDirection);
}

async function getDefinition(word) {
  const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${word}`;
  try {
    const response = await fetch(url);
    const data = await response.json();
    if (!response.ok) throw new Error('Failed to fetch definition.');
    if (data.length > 0 && data[0].meanings.length > 0 && data[0].meanings[0].definitions.length > 0) {
      const definition = data[0].meanings[0].definitions[0].definition;
      document.getElementById('wordDefinition').innerHTML = `<strong>Definition of ${word}:</strong> ${definition}`;
    } else {
      document.getElementById('wordDefinition').innerHTML = `No definition found for ${word}.`;
    }
  } catch (error) {
    console.error("Error fetching definition:", error);
    document.getElementById('wordDefinition').innerHTML = `Error fetching definition for ${word}.`;
  }
}

 function submitWord() {
  let wordFound = false;

  // Assuming 'data' is an array of words you are working with
  document.querySelectorAll('.words').forEach(function(wordElement) {
    const wordText = wordElement.textContent || wordElement.innerText;
    if (wordText.toUpperCase() === selectedLetters.toUpperCase()) {
      // If a matching word is found, you might want to mark it visually
      wordElement.style.textDecoration = "line-through";
      wordFound = true;
      // Optionally, leave the selected letters highlighted but clear the tracking variables
      selectedLetters = '';
      selectedPositions = [];
      selectionDirection = null;
      document.querySelectorAll('.selected').forEach(cell => cell.classList.add('found'));
      document.querySelectorAll('.selected').forEach(cell => cell.classList.remove('selected'));
      
    }
  });

  if (!wordFound) {
    // If no matching word was found after checking all, then clear the selection
    clearSelection();
  }
}

function clearSelection() {
  selectedLetters = '';
  selectedPositions = [];
  selectionDirection = null;
  document.querySelectorAll('.selected').forEach(cell => cell.classList.remove('selected'));
}
</script>
</body>
    
<a href="/login">Logout</a>
</html>
